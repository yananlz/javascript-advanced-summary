·this的优点：提供了一种更优雅的方式来隐式‘传递’一个对象引用。因此可以将API设计的更加简洁并且易于复用。
this在任何情况下都不指向函数的词法作用域。
在JS内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域无法通过JS代码访问，它存在于JS引擎内部。
this是在运行时绑定的，它的上下文取决于函数调用时的各种条件。
当一个函数被调用时，会创建一个活动记录。这个记录包含了函数在哪里被调用、函数的调用方法等信息。
this就是记录的其中一个属性，会在函数执行中用到。
如何查看一个函数的调用栈：可以用JS调试器工具给函数加断点，会展示当前位置的函数调用列表，这就是调用栈。
this的几个绑定：默认绑定、隐式绑定、显示绑定、new绑定
对象属性引用链中只有最顶层或者说最后一层会影响调用位置
例：function foo() {console.log( this.a );} var obj2 = {a: 42,foo: foo}; var obj1 = {a: 2, obj2: obj2}; obj1.obj2.foo(); // 42
this四个绑定的优先级：new绑定>显示绑定>隐式绑定>默认绑定。
如果把null或者undefined作为this的绑定对象传入call\apply\bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。
另一个需要注意的是，你有可能（有意或者无意地）创建一个函数的“间接引用”，在这种情况下，调用这个函数会应用默认绑定规则。间接引用最容易在赋值时发生。
箭头函数并不是使用 function 关键字定义的，而是使用被称为“胖箭头”的操作符 => 定义的。箭头函数不使用 this 的四种标准规则，
而是根据外层（函数或者全局）作用域来决定 this 。
对象定义的两种形式：文字形式和构造形式。文字形式： var myObj={key:value;……};
typeof null//Object，实际上，null本身是基本类型。
对象的内容是由一些存储在特定命名位置的（任意类型的）值组成的，我们称之为属性。
属性描述符：
1.writable 决定是否可以修改属性的值。对于属性值的修改静默失败（silently failed）了。
2.Configurable：只要属性是可配置的，就可以使用 defineProperty(..) 方法来修改属性描述符。
   即便属性是 configurable:false ， 我们还是可以把 writable 的状态由 true 改为 false ，但是无法由 false 改为 true 。
   除了无法修改， configurable:false 还会禁止删除这个属性
3.用户定义的所有的普通属性默认都是 enumerable（可枚举）。
所有的方法创建的都是浅不变形，也就是说，它们只会影响目标对象和它的直接属性。如果目标对象引用了其他对象（数组、对象、函数，等），
其他对象的内容不受影响，仍然是可变的。
结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性（不可修改、重定义或者删除）。
如果你想禁止一个对象添加新属性并且保留已有属性，可以使用 Object.preventExtensions(..)。
Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 
并把所有现有属性标记为 configurable:false 。
所以，密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性（虽然可以修改属性的值）。
Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(..) 
并把所有“数据访问”属性标记为 writable:false ，这样就无法修改它们的值。这个方法是你可以应用在对象上的级别最高的不可变性，
它会禁止对于对象本身及其任意直接属性的修改。
给一个属性定义 getter、setter 或者两者都有时，这个属性会被定义为“访问描述符”。
in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中。
for..in 循环可以用来遍历对象的可枚举属性列表。
多态的另一个方面是在继承链的不同层次中一个方法名可以被多次定义，当调用方法时会自动选择合适的定义。
对于默认的[[Get]]操作来说，如果无法在对象本身上找到需要的属性，就会继续访问对象的[[Protorype]]链。
所有的函数默认都会拥有一个名为protorype的公有并且不可枚举的属性。
JS默认不会复制对象属性。JS会在两个对象之间创建一个关联，这样一个对象可以通过委托访问另一个对象的属性和函数。
默认情况下，对象并不会像差异继承暗示的那样通过复制生成。因此，差异继承也不适合用来描述 JavaScript 的 [[Prototype]] 机制。
constructor并不表示被构造，.constructor并不是一个不可变属性，它是不可枚举的，但它的值是可被修改的。
委托行为意味着某些对象（ XYZ ）在找不到属性或者方法引用时会把这个请求委托给另一
个对象（Task）。禁止互相委托。
在委托设计模式中，除了建议使用不相同并且更具描述性的方法名之外，还要通过对象关联避免丑陋的显式伪多态调用（ Widget.call 和 Widget.prototype.render.call ），代之以简单的相对委托调用 this.init(..) 和 this.insert(..) 。
ES6 的 class 语法可以简洁地定义类方法。唯一的区别是对象的字面形式仍然需要使用“,”来分隔元素，而 class 语法不需要。这个区别对于整体的设计来说无关紧要。
匿名函数没有 name 标识符，这会导致：1. 调试栈更难追踪；2. 自我引用（递归、事件（解除）绑定，等等）更难；3. 代码（稍微）更难理解。



