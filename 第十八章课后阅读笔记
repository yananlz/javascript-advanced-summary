jQuery类库聚焦于查询。一个典型查询使用CSS选择器来识别一组文档元素，并返回一个对象来表示这些元素。返回的对象提供了大量有用的方法来批量操作匹配的元素。这些方法会尽可能返回调用对象本身，这使得简洁的链式调用成为可能。
jQuery特性：丰富强大的语法(CSS选择器)，用来查询文档元素;高效的查询方法，用来找到与CSS选择器匹配的文档元素集;一套有用的方法，用来操作选中的元素;强大的函数式编程技巧，用来批量操作元素集，而不是每次只操作单个;简单的语言用法(链式调用)，用来表示一系列顺序操作。
jQuery类库定义了一个全局函数：jQuery();别名：$。
jQuery是工厂函数，而不是构造函数，它返回一个新创建的对象，并没有和new关键字一起使用。
jQuery函数：jQuery函数是jQuery或$的值。该函数可以用来创建jQuery对象，用来注册DOM就绪时需要调用的处理程序，还可以做jQuery命名空间。jQuery对象：jQuery对象是由jQuery函数返回的对象。一个jQuery对象表示一组文档元素，也叫做“jQuery结果”、“jQuery集”或“包装集”。
选中元素：当传递CSS选择器给jQuery函数时，它返回的jQ表示匹配该选择器的文档元素集。在描述jQuery对象的方法时，常使用选中元素用来指代这些匹配的元素。选中是指CSS选择器，与用户执行的操作没有任何关系。
jQuery方法：jQuery方法是由jQuery函数返回的jQuery对象的方法。jQuery类库最重要的部分就是它定义的这些强大的方法。
jQuery对象的属性：length属性（类数组对象）以及0~length-1之间的数值属性;selector属性是创建jQuery对象时的选择器字符串;context属性是上下文对象，是传递给$()方法的第二个参数，如果没有传递的话，默认是Document对象。
jquery属性：检测该属性是否存在可以简单快捷地将jQuery对象和其他类数组对象区分开来。jquery属性值是字符串形式的jQuery版本号。
$()与querySelecorAll()：相似之处：都是用CSS选择器作为参数，并且返回类数组对象来存放匹配选择器的元素。不同之处：querySelectorAll()在新近的浏览器中才实现。
$()在新老浏览器中都能工作。jQuery可以通过手动实现选择，因此$()支持的CSS3选择器可以用在所有浏览器中，而不仅是那些支持CSS3浏览器。$()返回的类数组对象（jQuery对象）比querySelectorAll()返回的类数组对象(NodeList)更加有用。
遍历jQuery对象中的所有元素时，可以调用each()方法。each()方法：接收一个回调函数作为唯一的参数，然后对jQuery对象中的每一个元素调用回调函数。回调函数作为匹配元素的方法来调用，因此在回调函数里this关键字代指Element对象。
each()方法特点：如果回调函数在任一个元素上返回false，遍历将在该元素后中止（类似break）。
jQuery对象的getter和setter：jQuery使用同一个方法既当getter用又做setter用，而不是定义一对方法。如果传入一个新值给该方法，则它将设置此值;如果没指定值，则它返回当前值。
用作setter时，这些方法会给jQuery对象中的每一个元素设置值，然后返回该jQuery对象以方便链式调用。这些方法经常接受对象参数，在这种情况下，该对象的每一个属性都指定一个需要设置的名/值对。
在这种情况下，会调用该函数来计算需要设置的值。调用该函数时的this值是对应的元素，第一个参数是该元素的索引值，当前值则作为第二个参数传入。
用作getter时，这些方法会只查询元素集中的第一个元素，返回单个值。
attr()方法是jQuery中用于HTML属性的getter/setter。$("form").attr("action")//获取第一个form元素的action属性。$("#icon").attr("src","icon.gif")//设置src属性。可以一次设置多个属性。
css()方法用于元素CSS样式，只能获取单个样式值，不能获取复合样式。例如：margin ×  margin-top √
addClass()和removeClass()用来从选定元素中添加和删除类。toggleClass()用来判断某类是否存在。
val()方法用来设置和获取HTML表单元素的value属性，还可用于获取和设置复选框、单选按钮以及<select>元素的选中状态。
text()和html()方法用来获取和设置元素的纯文本或HTML内容。当不带参数调用时，text()返回所有匹配元素的所有子孙文本节点的纯文本内容。该方法甚至可以工作在不支持textContent或innerText属性的浏览器中。
如果不带参数调用html()方法，它会返回第一个匹配元素的HTML内容。
offset()方法可以获取或设置元素的位置。data()可以用来设置或获取与文档元素、Document或Window对象相关联的数据。
removeData()方法可以从元素中删除数据，如果不传入参数调用该方法，会删除与元素相关联的所有数据。如果传递字符串给该方法，该方法会删除元素中与该字符串相关联的值。
如果插入的元素已经是文档的一部分，这些元素只会简单地移动而不是复制到新位置。如果元素到插入不止一个位置，jQuery会在需要时复制元素，但是当只插入一个位置时，是不会进行复制操作的。
如果想复制一个元素到新位置，必须使用clone()方法来得到一个副本。
wrap():包装每一个选中元素。wrapInner()包装每一个选中元素地内容。wrapAll():则将选中元素作为一组来包装。
empty():会删除每个选中元素地所有子节点，但不会修改元素自身。remove()方法会从文档中移除选中元素。unwrap():可以实现元素地移除，其方式是wrap()或wrapAll()方法地反操作，不接受可选地选择器参数。
当用户使用鼠标、键盘或触发其他事件类型时，注册地事件处理程序会自动调用。然而，如果能手动触发事件，有时会很有用。手动触发事件最简单地方式是不带参数调用事件注册地简单方法(比如click()或mouseover())。
bind()方法绑定事件处理程序到指定文档元素。如果使用bind()给文档中地所有<a>元素绑定了事件处理程序，接着又创建了带有<a>元素的新文档内容，这些新元素和老元素不会拥有相同的事件处理程序，其行为将不一样。实时事件用来解决这个问题。
使用实时事件，需要使用delegate()和undelegate()方法来代替bind()和unbind()。实时事件依赖事件冒泡。当事件冒泡到document对象时，它有可能已经传递给了很多静态事件处理程序。
如果处理程序中有任何一个调用了Event对象的cancelBubble()方法，实时事件处理程序将永远不会调用。
在jQuery对象上调用live()方法时，该对象的元素实际上并没有使用。真正有关系的是用来创建jQuery对象的选择器字符串和上下文对象。jQuery对象通过context和selector属性来使得这些值可用。通常，仅带一个参数调用$()时，context是当前文档。
通过设置CSS的visibility属性，可以显示和隐藏属性。jQuery定义了fadeIn()和fadeOut()等简单方法来实现常见视觉效果。jQuery定义了一个animate()方法，用来实现更复杂的自定义动画。
stop():用来停止选中元素上的当前正在执行的任何动画。top（）方法接受两个可选的布尔值参数。如果第一个参数是true，会清除该元素上的动画队列。如果是false：如果忽略该参数，等待执行的动画不会被取消。
第二个参数用来指定正在连续变化的CSS属性是否保留当前值，还是应该变化到最终目标值。传入true可以让它们变化到最终值，传入false会让它们保持为当前值。
当动画是由用户事件触发时，在开始新的动画前，可能需要取消掉当前或等待执行的任何动画。
load()是所有jQuery工具中最简单的：向它传入一个URL，它会异步加载该URL的内容，然后将内容插入每一个选中元素中，替换掉已经存在的任何内容。
jQuery.getScript():第一个参数是JS代码文件的URL。它会异步加载文件，加载完成后在全局作用域执行该代码。它能同时适用于同源和跨源脚本。可以传入回调函数作为第二个参数。在这种情况下jQuery会在代码加载和执行完成后调用一次该调用函数。
jQuery.get()和jQuery.post()获取指定URL的内容，如果有数据的话，还可传入指定数据，最后则将结果传递给指定的回调函数。
jQuery选择器：1.简单选择器：开头部分（显示或隐式地）是标签类型声明

