异常捕获的两个原则：一处出错的含义不能被描述，那么就抛错；找到一个可以捕获错误的位置，捕获异常。
JS中的异常捕获与其他大多数语言类似：try语句可以聚合语句，并能够让你拦截这些语句中的异常。
throw语法：throw <<value>>;可以抛出任何JS值。
try-catch-finally:try是必选的,而catch和finally两者至少要有其一。finally会永远执行。
Error构造器:通用异常构造器。所有其他的异常构造器都是它的子构造器。
RangeError:表示一个数值超出了允许的范围。
ReferenceError:表示发现了一个非法的引用值，通常是一个未知的变量。
SyntaxError:表示产生了一个语法解析错误。
TypeError:表示一个被操作值的实际类型与其期望的类型不一致。
URIError:表示某个全局的URI控制函数的使用不兼容其定义。
异常属性值：message:异常的信息。name:异常的名称。 Stack:栈跟踪。不是标准的，很多平台都在使用。
对于“手动的”debug,有两种信息很有效：1.数据：变量可以有哪些值 2.执行：异常发生于哪一行，哪些函数是可以执行到的。
数组是映射，不是元组。ECMAScript标准声明数组可以作为索引到值的映射。换句话说，数组可能不是连续的，中间可能会有空缺。
数组仍然是对象，并且可以拥有对象的属性。但是这些属性不认为是数组的一部分，因为不认为它们是数组元素。
使用Array构造函数有两种方法：可以创建给定长度的空数组或给定元素的数组。对于数组构造函数，new是可选的。
数组索引的限制：索引i是数字，范围是0<=i<-2^32-1；最大长度:2^32-1。
在这个范围之外的索引被视为普通的属性键（字符串！）。不会作为数组元素呈现，且不影响length属性。
操作符in检测对象是否具有某个给定键的属性，也可以用来判断一个数组中是否存在给定的元素索引。
操作符delete可以删除数组元素。删除数组元素会产生空缺（不会更新length）。
使用Array.prototype.splice()可以移除元素不产生空缺。
把数组的长度设置为0，则数组变为空的，这样可以清空数组的元素。缺点：方法比较慢，具有讽刺意味，因为创建新的空数组通常都很快。
含有空缺的数组的称为为稀疏，不含空缺的数组称为密集。
涉及数组的一些操作会忽略空缺，其余不会。例：forEach()、every():遍历时会跳过空缺；map()虽然会跳过空缺，但是也保留了空缺。
filter()：去除了空缺；join()把空缺、undefined和null转化为空字符串;sort（）在排序时会保留空缺。
Array.prototype.concat(arr1?,arr2?,……)：创建一个新数组，其中包括接受者的所有元素，其次是数组arr1的所有元素，以此类推。
如果其中一个参数不是数组，那么它作为元素添加到结果中。
例：var arr=['a','b'];arr.concat('c',['d','e']);['a','b','c','d','e']调用concat()的数组没有被改变。
Array.prototype.reduce(callback,initialValue)：从左到右进行迭代，并按照之前描述的调用回调函数。这个方法的结果是由回调函数返回最后的值。
Array.prototype.reduceRight(callback,initialValue):与reduce()工作原理相同，但从右到左遍历。
Array.prototype.every(callback,thisValue):如果对每个元素，回调函数都返回true,则返回true。一旦回调函数返回flase，则停止迭代。
u没有返回值会导致隐式返回undefined，every()解释为false,every()类似于全称量词。
Array.prototype.some(callback,thisValue):如果回调函数至少有一个元素返回true，则返回true。一旦回调函数返回true,则停止迭代。
注意，没有返回值会导致隐式返回undefined，而some解释为false。some()类似于存在量词。
Array.prototype.map(callback,thisValue):输出数组的每个元素是对输入元素应用callback后的结果。
Array.prototype.filter(callback,thisValue):输出数组只包含callback返回为true的元素。
