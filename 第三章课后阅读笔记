JS中所有数字均用浮点数值表示。
JS中的运算符包括：+、-、*、/、%，还有Math对象的属性，例如：Math.pow()、Math.round()等等。
下溢：运算结果无限接近零并比JS能表示的最小值还小的时候发生的一种情况。这种情况下，JS返回0.当一个负数发生下溢时，JS将返回一个特殊的值“负零”，这个值几乎和正常的0完全一样。JS程序员很少用到负零。
被零整除在JS中不报错，只是简单的返回无穷大或负无穷大。0/0没有意义，结果为NaN,无穷大除无穷大、给任意负数作开方运算或者算术运算符与并不是数字或无法转换为数字的操作数一起使用时都返回NaN。
由双引号定界的字符串也可以包含单引号。
JS中的字符串直接量：由单引号或双引号引起来的字符序列。反斜线和行结束符都不算是字符串直接量的内容。
如果想要在字符串直接量中另起一行，可以用转义字符\n。
转义字符：\b退格符，\n换行符，\\反斜线。
JS定义了RegExp()构造函数，用来创建表示文本模式匹配的对象。这些模式被成为“正则表达式”。
JS中采用Perl中的正则表达式语法。String和RegExp对象均定义了正则表达式进行模式匹配和查找与替换的函数。
RegExp和Date一样，是具有实用API的特殊对象，依然具有直接量写法。
在两条斜线之间的文本构成了一个正则表达式直接量。第二条斜线之后也可以跟随一个或多个字母，用来修饰匹配模式的含义。
例：/^HTML/：匹配以HTML开始的字符串。
被转换为false:undefined、null、0、-0、NaN、空字符串。null==undefined// null !==undefined
JS解释器启动时（web浏览器重新加载新页面的时候），它将创建一个新的全局对象，并给它一组定义的初始属性：全局属性、全局函数、构造函数、全局对象。
全局对象的初始属性并不是保留字，但它们应当当作保留字来对待。
存取字符串、数字、或布尔值的属性时创建的临时对象成为包装对象。包装对象只是偶尔用来区分字符串值和字符串对象、数字和数值对象以及布尔值和布尔对象。
可以通过String()、Number()、Boolean（）构造函数来显示创建包装对象。
